"use strict";exports.id=189,exports.ids=[189],exports.modules={80189:(W,m,s)=>{s.d(m,{fromIni:()=>O});var a=s(16950),d=s(80952);const v=(e,t,n)=>{const i={EcsContainer:async r=>{const{fromHttp:o}=await s.e(58).then(s.bind(s,41058)),{fromContainerMetadata:l}=await s.e(745).then(s.bind(s,67745));return n?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),(0,d.cy)(o(r??{}),l(r))},Ec2InstanceMetadata:async r=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:o}=await s.e(745).then(s.bind(s,67745));return o(r)},Environment:async r=>{n?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:o}=await Promise.resolve().then(s.bind(s,46544));return o(r)}};if(e in i)return i[e];throw new d.C1(`Unsupported credential source in profile ${t}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:n})},h=(e,{profile:t="default",logger:n}={})=>Boolean(e)&&typeof e=="object"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(P(e,{profile:t,logger:n})||w(e,{profile:t,logger:n})),P=(e,{profile:t,logger:n})=>{const i=typeof e.source_profile=="string"&&typeof e.credential_source>"u";return i&&n?.debug?.(`    ${t} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),i},w=(e,{profile:t,logger:n})=>{const i=typeof e.credential_source=="string"&&typeof e.source_profile>"u";return i&&n?.debug?.(`    ${t} isCredentialSourceProfile credential_source=${e.credential_source}`),i},S=async(e,t,n,i={})=>{n.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const r=t[e];if(!n.roleAssumer){const{getDefaultRoleAssumer:c}=await s.e(724).then(s.bind(s,49724));n.roleAssumer=c({...n.clientConfig,credentialProviderLogger:n.logger,parentClientConfig:n?.parentClientConfig},n.clientPlugins)}const{source_profile:o}=r;if(o&&o in i)throw new d.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,a.Bz)(n)}. Profiles visited: `+Object.keys(i).join(", "),{logger:n.logger});n.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${o?`source_profile=[${o}]`:`profile=[${e}]`}`);const l=o?C(o,t,n,{...i,[o]:!0},u(t[o]??{})):(await v(r.credential_source,e,n.logger)(n))();if(u(r))return l;{const c={RoleArn:r.role_arn,RoleSessionName:r.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:r.external_id,DurationSeconds:parseInt(r.duration_seconds||"3600",10)},{mfa_serial:f}=r;if(f){if(!n.mfaCodeProvider)throw new d.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:n.logger,tryNextLink:!1});c.SerialNumber=f,c.TokenCode=await n.mfaCodeProvider(f)}const R=await l;return n.roleAssumer(R,c)}},u=e=>!e.role_arn&&!!e.credential_source,A=e=>Boolean(e)&&typeof e=="object"&&typeof e.credential_process=="string",I=async(e,t)=>s.e(909).then(s.bind(s,28909)).then(({fromProcess:n})=>n({...e,profile:t})()),x=async(e,t={})=>{const{fromSSO:n}=await s.e(983).then(s.bind(s,98983));return n({profile:e,logger:t.logger})()},$=e=>e&&(typeof e.sso_start_url=="string"||typeof e.sso_account_id=="string"||typeof e.sso_session=="string"||typeof e.sso_region=="string"||typeof e.sso_role_name=="string"),y=e=>Boolean(e)&&typeof e=="object"&&typeof e.aws_access_key_id=="string"&&typeof e.aws_secret_access_key=="string"&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,g=(e,t)=>(t?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials"),Promise.resolve({accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}})),E=e=>Boolean(e)&&typeof e=="object"&&typeof e.web_identity_token_file=="string"&&typeof e.role_arn=="string"&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,b=async(e,t)=>s.e(547).then(s.bind(s,78547)).then(({fromTokenFile:n})=>n({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:t.roleAssumerWithWebIdentity,logger:t.logger,parentClientConfig:t.parentClientConfig})()),C=async(e,t,n,i={},r=!1)=>{const o=t[e];if(Object.keys(i).length>0&&y(o))return g(o,n);if(r||h(o,{profile:e,logger:n.logger}))return S(e,t,n,i);if(y(o))return g(o,n);if(E(o))return b(o,n);if(A(o))return I(n,e);if($(o))return await x(e,n);throw new d.C1(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:n.logger})},O=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const t=await(0,a.YU)(e);return C((0,a.Bz)(e),t,e)}}};
